
Pump_motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  000002e2  00000376  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  0000037a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000037a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adc  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b3  00000000  00000000  00001888  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001c3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e2  00000000  00000000  00001d04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000290  00000000  00000000  000021e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002476  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	56 c0       	rjmp	.+172    	; 0xae <__ctors_end>
   2:	00 00       	nop
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	00 00       	nop
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	00 00       	nop
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	00 00       	nop
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	00 00       	nop
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	00 00       	nop
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	00 00       	nop
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>
  26:	00 00       	nop
  28:	5f c0       	rjmp	.+190    	; 0xe8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5d c0       	rjmp	.+186    	; 0xe8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	5b c0       	rjmp	.+182    	; 0xe8 <__bad_interrupt>
  32:	00 00       	nop
  34:	c6 c0       	rjmp	.+396    	; 0x1c2 <__vector_13>
  36:	00 00       	nop
  38:	57 c0       	rjmp	.+174    	; 0xe8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	55 c0       	rjmp	.+170    	; 0xe8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	53 c0       	rjmp	.+166    	; 0xe8 <__bad_interrupt>
  42:	00 00       	nop
  44:	51 c0       	rjmp	.+162    	; 0xe8 <__bad_interrupt>
  46:	00 00       	nop
  48:	4f c0       	rjmp	.+158    	; 0xe8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4d c0       	rjmp	.+154    	; 0xe8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	4b c0       	rjmp	.+150    	; 0xe8 <__bad_interrupt>
  52:	00 00       	nop
  54:	49 c0       	rjmp	.+146    	; 0xe8 <__bad_interrupt>
  56:	00 00       	nop
  58:	47 c0       	rjmp	.+142    	; 0xe8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	45 c0       	rjmp	.+138    	; 0xe8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	43 c0       	rjmp	.+134    	; 0xe8 <__bad_interrupt>
  62:	00 00       	nop
  64:	41 c0       	rjmp	.+130    	; 0xe8 <__bad_interrupt>
  66:	00 00       	nop
  68:	3f c0       	rjmp	.+126    	; 0xe8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3d c0       	rjmp	.+122    	; 0xe8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	3b c0       	rjmp	.+118    	; 0xe8 <__bad_interrupt>
  72:	00 00       	nop
  74:	39 c0       	rjmp	.+114    	; 0xe8 <__bad_interrupt>
  76:	00 00       	nop
  78:	37 c0       	rjmp	.+110    	; 0xe8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	35 c0       	rjmp	.+106    	; 0xe8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	33 c0       	rjmp	.+102    	; 0xe8 <__bad_interrupt>
  82:	00 00       	nop
  84:	31 c0       	rjmp	.+98     	; 0xe8 <__bad_interrupt>
  86:	00 00       	nop
  88:	2f c0       	rjmp	.+94     	; 0xe8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	84 00       	.word	0x0084	; ????
  8e:	89 00       	.word	0x0089	; ????
  90:	8e 00       	.word	0x008e	; ????
  92:	93 00       	.word	0x0093	; ????
  94:	98 00       	.word	0x0098	; ????
  96:	9d 00       	.word	0x009d	; ????
  98:	a2 00       	.word	0x00a2	; ????
  9a:	a7 00       	.word	0x00a7	; ????
  9c:	84 00       	.word	0x0084	; ????
  9e:	84 00       	.word	0x0084	; ????
  a0:	89 00       	.word	0x0089	; ????
  a2:	8e 00       	.word	0x008e	; ????
  a4:	93 00       	.word	0x0093	; ????
  a6:	98 00       	.word	0x0098	; ????
  a8:	9d 00       	.word	0x009d	; ????
  aa:	a2 00       	.word	0x00a2	; ????
  ac:	a7 00       	.word	0x00a7	; ????

000000ae <__ctors_end>:
  ae:	11 24       	eor	r1, r1
  b0:	1f be       	out	0x3f, r1	; 63
  b2:	cf ef       	ldi	r28, 0xFF	; 255
  b4:	d0 e4       	ldi	r29, 0x40	; 64
  b6:	de bf       	out	0x3e, r29	; 62
  b8:	cd bf       	out	0x3d, r28	; 61

000000ba <__do_copy_data>:
  ba:	11 e0       	ldi	r17, 0x01	; 1
  bc:	a0 e0       	ldi	r26, 0x00	; 0
  be:	b1 e0       	ldi	r27, 0x01	; 1
  c0:	e2 ee       	ldi	r30, 0xE2	; 226
  c2:	f2 e0       	ldi	r31, 0x02	; 2
  c4:	00 e0       	ldi	r16, 0x00	; 0
  c6:	0b bf       	out	0x3b, r16	; 59
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x14>
  ca:	07 90       	elpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	a4 30       	cpi	r26, 0x04	; 4
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0x10>

000000d4 <__do_clear_bss>:
  d4:	21 e0       	ldi	r18, 0x01	; 1
  d6:	a4 e0       	ldi	r26, 0x04	; 4
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a4 31       	cpi	r26, 0x14	; 20
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	aa d0       	rcall	.+340    	; 0x23a <main>
  e6:	fb c0       	rjmp	.+502    	; 0x2de <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <SM1Tick>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  ea:	89 30       	cpi	r24, 0x09	; 9
  ec:	91 05       	cpc	r25, r1
  ee:	20 f4       	brcc	.+8      	; 0xf8 <SM1Tick+0xe>
  f0:	fc 01       	movw	r30, r24
  f2:	ea 5b       	subi	r30, 0xBA	; 186
  f4:	ff 4f       	sbci	r31, 0xFF	; 255
  f6:	ea c0       	rjmp	.+468    	; 0x2cc <__tablejump2__>
  f8:	fc 01       	movw	r30, r24
  fa:	31 97       	sbiw	r30, 0x01	; 1
  fc:	e8 30       	cpi	r30, 0x08	; 8
  fe:	f1 05       	cpc	r31, r1
 100:	50 f5       	brcc	.+84     	; 0x156 <SM1Tick+0x6c>
 102:	e1 5b       	subi	r30, 0xB1	; 177
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	e2 c0       	rjmp	.+452    	; 0x2cc <__tablejump2__>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	82 b9       	out	0x02, r24	; 2
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	90 e0       	ldi	r25, 0x00	; 0
 110:	08 95       	ret
 112:	83 e0       	ldi	r24, 0x03	; 3
 114:	82 b9       	out	0x02, r24	; 2
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	08 95       	ret
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	82 b9       	out	0x02, r24	; 2
 120:	83 e0       	ldi	r24, 0x03	; 3
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	08 95       	ret
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	82 b9       	out	0x02, r24	; 2
 12a:	84 e0       	ldi	r24, 0x04	; 4
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	08 95       	ret
 130:	84 e0       	ldi	r24, 0x04	; 4
 132:	82 b9       	out	0x02, r24	; 2
 134:	85 e0       	ldi	r24, 0x05	; 5
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	08 95       	ret
 13a:	8c e0       	ldi	r24, 0x0C	; 12
 13c:	82 b9       	out	0x02, r24	; 2
 13e:	86 e0       	ldi	r24, 0x06	; 6
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	08 95       	ret
 144:	80 e8       	ldi	r24, 0x80	; 128
 146:	82 b9       	out	0x02, r24	; 2
 148:	87 e0       	ldi	r24, 0x07	; 7
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	08 95       	ret
 14e:	80 e9       	ldi	r24, 0x90	; 144
 150:	82 b9       	out	0x02, r24	; 2
 152:	88 e0       	ldi	r24, 0x08	; 8
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	08 95       	ret

00000158 <TimerSet>:
 158:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 15c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 164:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 168:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
 16c:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
 170:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
 174:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
 178:	08 95       	ret

0000017a <TimerOn>:
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 180:	8d e7       	ldi	r24, 0x7D	; 125
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 188:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 18c:	82 e0       	ldi	r24, 0x02	; 2
 18e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 192:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 196:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 1a2:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 1a6:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 1aa:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 1ae:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 1b2:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 1b6:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 1ba:	8f b7       	in	r24, 0x3f	; 63
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	8f bf       	out	0x3f, r24	; 63
 1c0:	08 95       	ret

000001c2 <__vector_13>:
 1c2:	1f 92       	push	r1
 1c4:	0f 92       	push	r0
 1c6:	0f b6       	in	r0, 0x3f	; 63
 1c8:	0f 92       	push	r0
 1ca:	11 24       	eor	r1, r1
 1cc:	8f 93       	push	r24
 1ce:	9f 93       	push	r25
 1d0:	af 93       	push	r26
 1d2:	bf 93       	push	r27
 1d4:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 1d8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 1dc:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 1e0:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	a1 09       	sbc	r26, r1
 1e8:	b1 09       	sbc	r27, r1
 1ea:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 1ee:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 1f2:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 1f6:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 1fa:	89 2b       	or	r24, r25
 1fc:	8a 2b       	or	r24, r26
 1fe:	8b 2b       	or	r24, r27
 200:	99 f4       	brne	.+38     	; 0x228 <__vector_13+0x66>
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 208:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 20c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 210:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 214:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 218:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 21c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 220:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 224:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 228:	bf 91       	pop	r27
 22a:	af 91       	pop	r26
 22c:	9f 91       	pop	r25
 22e:	8f 91       	pop	r24
 230:	0f 90       	pop	r0
 232:	0f be       	out	0x3f, r0	; 63
 234:	0f 90       	pop	r0
 236:	1f 90       	pop	r1
 238:	18 95       	reti

0000023a <main>:

int main(void)
{

	//Ports and DDRX
	DDRA = 0xFF; PORTA = 0x00;
 23a:	8f ef       	ldi	r24, 0xFF	; 255
 23c:	81 b9       	out	0x01, r24	; 1
 23e:	12 b8       	out	0x02, r1	; 2
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task #1
	task1.state = off; // Task initial state
 240:	e4 e0       	ldi	r30, 0x04	; 4
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	10 82       	st	Z, r1
	task1.period = SMTick1_period; //Task period
 246:	83 e0       	ldi	r24, 0x03	; 3
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	a0 e0       	ldi	r26, 0x00	; 0
 24c:	b0 e0       	ldi	r27, 0x00	; 0
 24e:	81 83       	std	Z+1, r24	; 0x01
 250:	92 83       	std	Z+2, r25	; 0x02
 252:	a3 83       	std	Z+3, r26	; 0x03
 254:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period; //Task current elapsed time
 256:	85 83       	std	Z+5, r24	; 0x05
 258:	96 83       	std	Z+6, r25	; 0x06
 25a:	a7 83       	std	Z+7, r26	; 0x07
 25c:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1Tick; //Function pointer for the tick
 25e:	85 e7       	ldi	r24, 0x75	; 117
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	92 87       	std	Z+10, r25	; 0x0a
 264:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(tmpGCD);
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	70 e0       	ldi	r23, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	74 df       	rcall	.-280    	; 0x158 <TimerSet>
	TimerOn();
 270:	84 df       	rcall	.-248    	; 0x17a <TimerOn>
 272:	c4 e0       	ldi	r28, 0x04	; 4
    while (1) 
    {
		//Scheduler code
		for(i = 0; i < numTasks; i++){
			// Task is ready to tick
			if(tasks[i]->elapsedTime == tasks[i]->period){
 274:	d1 e0       	ldi	r29, 0x01	; 1
 276:	4d 81       	ldd	r20, Y+5	; 0x05
 278:	5e 81       	ldd	r21, Y+6	; 0x06
 27a:	6f 81       	ldd	r22, Y+7	; 0x07
 27c:	78 85       	ldd	r23, Y+8	; 0x08
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	ab 81       	ldd	r26, Y+3	; 0x03
 284:	bc 81       	ldd	r27, Y+4	; 0x04
 286:	48 17       	cp	r20, r24
 288:	59 07       	cpc	r21, r25
 28a:	6a 07       	cpc	r22, r26
 28c:	7b 07       	cpc	r23, r27
 28e:	61 f4       	brne	.+24     	; 0x2a8 <main+0x6e>
 290:	88 81       	ld	r24, Y
				//Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 292:	e9 85       	ldd	r30, Y+9	; 0x09
 294:	fa 85       	ldd	r31, Y+10	; 0x0a
 296:	08 2e       	mov	r0, r24
 298:	00 0c       	add	r0, r0
 29a:	99 0b       	sbc	r25, r25
 29c:	09 95       	icall
 29e:	88 83       	st	Y, r24
 2a0:	1d 82       	std	Y+5, r1	; 0x05
				//Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 2a2:	1e 82       	std	Y+6, r1	; 0x06
 2a4:	1f 82       	std	Y+7, r1	; 0x07
 2a6:	18 86       	std	Y+8, r1	; 0x08
 2a8:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime +=1;
 2aa:	9e 81       	ldd	r25, Y+6	; 0x06
 2ac:	af 81       	ldd	r26, Y+7	; 0x07
 2ae:	b8 85       	ldd	r27, Y+8	; 0x08
 2b0:	01 96       	adiw	r24, 0x01	; 1
 2b2:	a1 1d       	adc	r26, r1
 2b4:	b1 1d       	adc	r27, r1
 2b6:	8d 83       	std	Y+5, r24	; 0x05
 2b8:	9e 83       	std	Y+6, r25	; 0x06
 2ba:	af 83       	std	Y+7, r26	; 0x07
 2bc:	b8 87       	std	Y+8, r27	; 0x08
 2be:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 2c2:	88 23       	and	r24, r24
 2c4:	e1 f3       	breq	.-8      	; 0x2be <main+0x84>
 2c6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 2ca:	d5 cf       	rjmp	.-86     	; 0x276 <main+0x3c>

000002cc <__tablejump2__>:
    }
 2cc:	ee 0f       	add	r30, r30
 2ce:	ff 1f       	adc	r31, r31
 2d0:	00 24       	eor	r0, r0
 2d2:	00 1c       	adc	r0, r0
 2d4:	0b be       	out	0x3b, r0	; 59
 2d6:	07 90       	elpm	r0, Z+
 2d8:	f6 91       	elpm	r31, Z
 2da:	e0 2d       	mov	r30, r0
 2dc:	09 94       	ijmp

000002de <_exit>:
 2de:	f8 94       	cli

000002e0 <__stop_program>:
 2e0:	ff cf       	rjmp	.-2      	; 0x2e0 <__stop_program>
