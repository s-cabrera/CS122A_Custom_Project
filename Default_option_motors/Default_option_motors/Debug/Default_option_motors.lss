
Default_option_motors.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000344  000003d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000344  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800104  00800104  000003dc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000040c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000adc  00000000  00000000  000004a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000968  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003fb  00000000  00000000  000018e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c8  00000000  00000000  00001ce4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  00001dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000003ae  00000000  00000000  000022a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002652  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	57 c0       	rjmp	.+174    	; 0xb0 <__ctors_end>
   2:	00 00       	nop
   4:	72 c0       	rjmp	.+228    	; 0xea <__bad_interrupt>
   6:	00 00       	nop
   8:	70 c0       	rjmp	.+224    	; 0xea <__bad_interrupt>
   a:	00 00       	nop
   c:	6e c0       	rjmp	.+220    	; 0xea <__bad_interrupt>
   e:	00 00       	nop
  10:	6c c0       	rjmp	.+216    	; 0xea <__bad_interrupt>
  12:	00 00       	nop
  14:	6a c0       	rjmp	.+212    	; 0xea <__bad_interrupt>
  16:	00 00       	nop
  18:	68 c0       	rjmp	.+208    	; 0xea <__bad_interrupt>
  1a:	00 00       	nop
  1c:	66 c0       	rjmp	.+204    	; 0xea <__bad_interrupt>
  1e:	00 00       	nop
  20:	64 c0       	rjmp	.+200    	; 0xea <__bad_interrupt>
  22:	00 00       	nop
  24:	62 c0       	rjmp	.+196    	; 0xea <__bad_interrupt>
  26:	00 00       	nop
  28:	60 c0       	rjmp	.+192    	; 0xea <__bad_interrupt>
  2a:	00 00       	nop
  2c:	5e c0       	rjmp	.+188    	; 0xea <__bad_interrupt>
  2e:	00 00       	nop
  30:	5c c0       	rjmp	.+184    	; 0xea <__bad_interrupt>
  32:	00 00       	nop
  34:	f5 c0       	rjmp	.+490    	; 0x220 <__vector_13>
  36:	00 00       	nop
  38:	58 c0       	rjmp	.+176    	; 0xea <__bad_interrupt>
  3a:	00 00       	nop
  3c:	56 c0       	rjmp	.+172    	; 0xea <__bad_interrupt>
  3e:	00 00       	nop
  40:	54 c0       	rjmp	.+168    	; 0xea <__bad_interrupt>
  42:	00 00       	nop
  44:	52 c0       	rjmp	.+164    	; 0xea <__bad_interrupt>
  46:	00 00       	nop
  48:	50 c0       	rjmp	.+160    	; 0xea <__bad_interrupt>
  4a:	00 00       	nop
  4c:	4e c0       	rjmp	.+156    	; 0xea <__bad_interrupt>
  4e:	00 00       	nop
  50:	4c c0       	rjmp	.+152    	; 0xea <__bad_interrupt>
  52:	00 00       	nop
  54:	4a c0       	rjmp	.+148    	; 0xea <__bad_interrupt>
  56:	00 00       	nop
  58:	48 c0       	rjmp	.+144    	; 0xea <__bad_interrupt>
  5a:	00 00       	nop
  5c:	46 c0       	rjmp	.+140    	; 0xea <__bad_interrupt>
  5e:	00 00       	nop
  60:	44 c0       	rjmp	.+136    	; 0xea <__bad_interrupt>
  62:	00 00       	nop
  64:	42 c0       	rjmp	.+132    	; 0xea <__bad_interrupt>
  66:	00 00       	nop
  68:	40 c0       	rjmp	.+128    	; 0xea <__bad_interrupt>
  6a:	00 00       	nop
  6c:	3e c0       	rjmp	.+124    	; 0xea <__bad_interrupt>
  6e:	00 00       	nop
  70:	3c c0       	rjmp	.+120    	; 0xea <__bad_interrupt>
  72:	00 00       	nop
  74:	3a c0       	rjmp	.+116    	; 0xea <__bad_interrupt>
  76:	00 00       	nop
  78:	38 c0       	rjmp	.+112    	; 0xea <__bad_interrupt>
  7a:	00 00       	nop
  7c:	36 c0       	rjmp	.+108    	; 0xea <__bad_interrupt>
  7e:	00 00       	nop
  80:	34 c0       	rjmp	.+104    	; 0xea <__bad_interrupt>
  82:	00 00       	nop
  84:	32 c0       	rjmp	.+100    	; 0xea <__bad_interrupt>
  86:	00 00       	nop
  88:	30 c0       	rjmp	.+96     	; 0xea <__bad_interrupt>
  8a:	00 00       	nop
  8c:	7d 00       	.word	0x007d	; ????
  8e:	86 00       	.word	0x0086	; ????
  90:	8a 00       	.word	0x008a	; ????
  92:	8e 00       	.word	0x008e	; ????
  94:	92 00       	.word	0x0092	; ????
  96:	96 00       	.word	0x0096	; ????
  98:	9a 00       	.word	0x009a	; ????
  9a:	9e 00       	.word	0x009e	; ????
  9c:	a2 00       	.word	0x00a2	; ????
  9e:	b1 00       	.word	0x00b1	; ????
  a0:	b5 00       	.word	0x00b5	; ????
  a2:	b8 00       	.word	0x00b8	; ????
  a4:	bd 00       	.word	0x00bd	; ????
  a6:	c2 00       	.word	0x00c2	; ????
  a8:	c7 00       	.word	0x00c7	; ????
  aa:	cc 00       	.word	0x00cc	; ????
  ac:	d1 00       	.word	0x00d1	; ????
  ae:	d6 00       	.word	0x00d6	; ????

000000b0 <__ctors_end>:
  b0:	11 24       	eor	r1, r1
  b2:	1f be       	out	0x3f, r1	; 63
  b4:	cf ef       	ldi	r28, 0xFF	; 255
  b6:	d0 e4       	ldi	r29, 0x40	; 64
  b8:	de bf       	out	0x3e, r29	; 62
  ba:	cd bf       	out	0x3d, r28	; 61

000000bc <__do_copy_data>:
  bc:	11 e0       	ldi	r17, 0x01	; 1
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b1 e0       	ldi	r27, 0x01	; 1
  c2:	e4 e4       	ldi	r30, 0x44	; 68
  c4:	f3 e0       	ldi	r31, 0x03	; 3
  c6:	00 e0       	ldi	r16, 0x00	; 0
  c8:	0b bf       	out	0x3b, r16	; 59
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x14>
  cc:	07 90       	elpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	a4 30       	cpi	r26, 0x04	; 4
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0x10>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	a4 e0       	ldi	r26, 0x04	; 4
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	a4 31       	cpi	r26, 0x14	; 20
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	d8 d0       	rcall	.+432    	; 0x298 <main>
  e8:	2b c1       	rjmp	.+598    	; 0x340 <_exit>

000000ea <__bad_interrupt>:
  ea:	8a cf       	rjmp	.-236    	; 0x0 <__vectors>

000000ec <SM1Tick>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  ec:	89 30       	cpi	r24, 0x09	; 9
  ee:	91 05       	cpc	r25, r1
  f0:	88 f5       	brcc	.+98     	; 0x154 <SM1Tick+0x68>
  f2:	fc 01       	movw	r30, r24
  f4:	ea 5b       	subi	r30, 0xBA	; 186
  f6:	ff 4f       	sbci	r31, 0xFF	; 255
  f8:	1a c1       	rjmp	.+564    	; 0x32e <__tablejump2__>
  fa:	86 b1       	in	r24, 0x06	; 6
  fc:	31 e0       	ldi	r19, 0x01	; 1
  fe:	20 e0       	ldi	r18, 0x00	; 0
 100:	8f 3f       	cpi	r24, 0xFF	; 255
 102:	09 f0       	breq	.+2      	; 0x106 <SM1Tick+0x1a>
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	83 2f       	mov	r24, r19
 108:	92 2f       	mov	r25, r18
 10a:	24 c0       	rjmp	.+72     	; 0x154 <SM1Tick+0x68>
 10c:	86 b1       	in	r24, 0x06	; 6
 10e:	8f 3f       	cpi	r24, 0xFF	; 255
 110:	41 f5       	brne	.+80     	; 0x162 <SM1Tick+0x76>
 112:	2e c0       	rjmp	.+92     	; 0x170 <SM1Tick+0x84>
 114:	86 b1       	in	r24, 0x06	; 6
 116:	8f 3f       	cpi	r24, 0xFF	; 255
 118:	21 f5       	brne	.+72     	; 0x162 <SM1Tick+0x76>
 11a:	2f c0       	rjmp	.+94     	; 0x17a <SM1Tick+0x8e>
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	8f 3f       	cpi	r24, 0xFF	; 255
 120:	01 f5       	brne	.+64     	; 0x162 <SM1Tick+0x76>
 122:	30 c0       	rjmp	.+96     	; 0x184 <SM1Tick+0x98>
 124:	86 b1       	in	r24, 0x06	; 6
 126:	8f 3f       	cpi	r24, 0xFF	; 255
 128:	e1 f4       	brne	.+56     	; 0x162 <SM1Tick+0x76>
 12a:	31 c0       	rjmp	.+98     	; 0x18e <SM1Tick+0xa2>
 12c:	86 b1       	in	r24, 0x06	; 6
 12e:	8f 3f       	cpi	r24, 0xFF	; 255
 130:	c1 f4       	brne	.+48     	; 0x162 <SM1Tick+0x76>
 132:	32 c0       	rjmp	.+100    	; 0x198 <SM1Tick+0xac>
 134:	86 b1       	in	r24, 0x06	; 6
 136:	8f 3f       	cpi	r24, 0xFF	; 255
 138:	a1 f4       	brne	.+40     	; 0x162 <SM1Tick+0x76>
 13a:	33 c0       	rjmp	.+102    	; 0x1a2 <SM1Tick+0xb6>
 13c:	86 b1       	in	r24, 0x06	; 6
 13e:	8f 3f       	cpi	r24, 0xFF	; 255
 140:	81 f4       	brne	.+32     	; 0x162 <SM1Tick+0x76>
 142:	34 c0       	rjmp	.+104    	; 0x1ac <SM1Tick+0xc0>
 144:	86 b1       	in	r24, 0x06	; 6
 146:	31 e0       	ldi	r19, 0x01	; 1
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	8f 3f       	cpi	r24, 0xFF	; 255
 14c:	09 f0       	breq	.+2      	; 0x150 <SM1Tick+0x64>
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	83 2f       	mov	r24, r19
 152:	92 2f       	mov	r25, r18
 154:	89 30       	cpi	r24, 0x09	; 9
 156:	91 05       	cpc	r25, r1
 158:	68 f5       	brcc	.+90     	; 0x1b4 <SM1Tick+0xc8>
 15a:	fc 01       	movw	r30, r24
 15c:	e1 5b       	subi	r30, 0xB1	; 177
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	e6 c0       	rjmp	.+460    	; 0x32e <__tablejump2__>
 162:	12 b8       	out	0x02, r1	; 2
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	08 95       	ret
 16a:	21 e0       	ldi	r18, 0x01	; 1
 16c:	22 b9       	out	0x02, r18	; 2
 16e:	08 95       	ret
 170:	83 e0       	ldi	r24, 0x03	; 3
 172:	82 b9       	out	0x02, r24	; 2
 174:	82 e0       	ldi	r24, 0x02	; 2
 176:	90 e0       	ldi	r25, 0x00	; 0
 178:	08 95       	ret
 17a:	82 e0       	ldi	r24, 0x02	; 2
 17c:	82 b9       	out	0x02, r24	; 2
 17e:	83 e0       	ldi	r24, 0x03	; 3
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	08 95       	ret
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	82 b9       	out	0x02, r24	; 2
 188:	84 e0       	ldi	r24, 0x04	; 4
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	08 95       	ret
 18e:	84 e0       	ldi	r24, 0x04	; 4
 190:	82 b9       	out	0x02, r24	; 2
 192:	85 e0       	ldi	r24, 0x05	; 5
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	08 95       	ret
 198:	8c e0       	ldi	r24, 0x0C	; 12
 19a:	82 b9       	out	0x02, r24	; 2
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret
 1a2:	80 e8       	ldi	r24, 0x80	; 128
 1a4:	82 b9       	out	0x02, r24	; 2
 1a6:	87 e0       	ldi	r24, 0x07	; 7
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	08 95       	ret
 1ac:	80 e9       	ldi	r24, 0x90	; 144
 1ae:	82 b9       	out	0x02, r24	; 2
 1b0:	88 e0       	ldi	r24, 0x08	; 8
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	08 95       	ret

000001b6 <TimerSet>:
 1b6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
 1ba:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
 1be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
 1c2:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
 1c6:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <_avr_timer_cntcurr>
 1ca:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <_avr_timer_cntcurr+0x1>
 1ce:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <_avr_timer_cntcurr+0x2>
 1d2:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <_avr_timer_cntcurr+0x3>
 1d6:	08 95       	ret

000001d8 <TimerOn>:
 1d8:	8b e0       	ldi	r24, 0x0B	; 11
 1da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1de:	8d e7       	ldi	r24, 0x7D	; 125
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1ea:	82 e0       	ldi	r24, 0x02	; 2
 1ec:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 1fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 200:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 204:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 208:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 20c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 210:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 214:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 218:	8f b7       	in	r24, 0x3f	; 63
 21a:	80 68       	ori	r24, 0x80	; 128
 21c:	8f bf       	out	0x3f, r24	; 63
 21e:	08 95       	ret

00000220 <__vector_13>:
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	af 93       	push	r26
 230:	bf 93       	push	r27
 232:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <_avr_timer_cntcurr>
 236:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <_avr_timer_cntcurr+0x1>
 23a:	a0 91 11 01 	lds	r26, 0x0111	; 0x800111 <_avr_timer_cntcurr+0x2>
 23e:	b0 91 12 01 	lds	r27, 0x0112	; 0x800112 <_avr_timer_cntcurr+0x3>
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	a1 09       	sbc	r26, r1
 246:	b1 09       	sbc	r27, r1
 248:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 24c:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 250:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 254:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 258:	89 2b       	or	r24, r25
 25a:	8a 2b       	or	r24, r26
 25c:	8b 2b       	or	r24, r27
 25e:	99 f4       	brne	.+38     	; 0x286 <__vector_13+0x66>
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <TimerFlag>
 266:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 26a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 26e:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 272:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 276:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <_avr_timer_cntcurr>
 27a:	90 93 10 01 	sts	0x0110, r25	; 0x800110 <_avr_timer_cntcurr+0x1>
 27e:	a0 93 11 01 	sts	0x0111, r26	; 0x800111 <_avr_timer_cntcurr+0x2>
 282:	b0 93 12 01 	sts	0x0112, r27	; 0x800112 <_avr_timer_cntcurr+0x3>
 286:	bf 91       	pop	r27
 288:	af 91       	pop	r26
 28a:	9f 91       	pop	r25
 28c:	8f 91       	pop	r24
 28e:	0f 90       	pop	r0
 290:	0f be       	out	0x3f, r0	; 63
 292:	0f 90       	pop	r0
 294:	1f 90       	pop	r1
 296:	18 95       	reti

00000298 <main>:

int main(void)
{

	//Ports and DDRX
	DDRA = 0xFF; PORTA = 0x00;
 298:	8f ef       	ldi	r24, 0xFF	; 255
 29a:	81 b9       	out	0x01, r24	; 1
 29c:	12 b8       	out	0x02, r1	; 2
	DDRC = 0x00; PORTC = 0xFF;
 29e:	17 b8       	out	0x07, r1	; 7
 2a0:	88 b9       	out	0x08, r24	; 8
	static task task1;
	task *tasks[] = {&task1};
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	
	//Task #1
	task1.state = off; // Task initial state
 2a2:	e4 e0       	ldi	r30, 0x04	; 4
 2a4:	f1 e0       	ldi	r31, 0x01	; 1
 2a6:	10 82       	st	Z, r1
	task1.period = SMTick1_period; //Task period
 2a8:	83 e0       	ldi	r24, 0x03	; 3
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	a0 e0       	ldi	r26, 0x00	; 0
 2ae:	b0 e0       	ldi	r27, 0x00	; 0
 2b0:	81 83       	std	Z+1, r24	; 0x01
 2b2:	92 83       	std	Z+2, r25	; 0x02
 2b4:	a3 83       	std	Z+3, r26	; 0x03
 2b6:	b4 83       	std	Z+4, r27	; 0x04
	task1.elapsedTime = SMTick1_period; //Task current elapsed time
 2b8:	85 83       	std	Z+5, r24	; 0x05
 2ba:	96 83       	std	Z+6, r25	; 0x06
 2bc:	a7 83       	std	Z+7, r26	; 0x07
 2be:	b0 87       	std	Z+8, r27	; 0x08
	task1.TickFct = &SM1Tick; //Function pointer for the tick
 2c0:	86 e7       	ldi	r24, 0x76	; 118
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	92 87       	std	Z+10, r25	; 0x0a
 2c6:	81 87       	std	Z+9, r24	; 0x09
	
	TimerSet(tmpGCD);
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	70 e0       	ldi	r23, 0x00	; 0
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	72 df       	rcall	.-284    	; 0x1b6 <TimerSet>
	TimerOn();
 2d2:	82 df       	rcall	.-252    	; 0x1d8 <TimerOn>
 2d4:	c4 e0       	ldi	r28, 0x04	; 4
	while (1)
	{
		//Scheduler code
		for(i = 0; i < numTasks; i++){
			// Task is ready to tick
			if(tasks[i]->elapsedTime == tasks[i]->period){
 2d6:	d1 e0       	ldi	r29, 0x01	; 1
 2d8:	4d 81       	ldd	r20, Y+5	; 0x05
 2da:	5e 81       	ldd	r21, Y+6	; 0x06
 2dc:	6f 81       	ldd	r22, Y+7	; 0x07
 2de:	78 85       	ldd	r23, Y+8	; 0x08
 2e0:	89 81       	ldd	r24, Y+1	; 0x01
 2e2:	9a 81       	ldd	r25, Y+2	; 0x02
 2e4:	ab 81       	ldd	r26, Y+3	; 0x03
 2e6:	bc 81       	ldd	r27, Y+4	; 0x04
 2e8:	48 17       	cp	r20, r24
 2ea:	59 07       	cpc	r21, r25
 2ec:	6a 07       	cpc	r22, r26
 2ee:	7b 07       	cpc	r23, r27
 2f0:	61 f4       	brne	.+24     	; 0x30a <main+0x72>
 2f2:	88 81       	ld	r24, Y
				//Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 2f4:	e9 85       	ldd	r30, Y+9	; 0x09
 2f6:	fa 85       	ldd	r31, Y+10	; 0x0a
 2f8:	08 2e       	mov	r0, r24
 2fa:	00 0c       	add	r0, r0
 2fc:	99 0b       	sbc	r25, r25
 2fe:	09 95       	icall
 300:	88 83       	st	Y, r24
 302:	1d 82       	std	Y+5, r1	; 0x05
				//Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 304:	1e 82       	std	Y+6, r1	; 0x06
 306:	1f 82       	std	Y+7, r1	; 0x07
 308:	18 86       	std	Y+8, r1	; 0x08
 30a:	8d 81       	ldd	r24, Y+5	; 0x05
			}
			tasks[i]->elapsedTime +=1;
 30c:	9e 81       	ldd	r25, Y+6	; 0x06
 30e:	af 81       	ldd	r26, Y+7	; 0x07
 310:	b8 85       	ldd	r27, Y+8	; 0x08
 312:	01 96       	adiw	r24, 0x01	; 1
 314:	a1 1d       	adc	r26, r1
 316:	b1 1d       	adc	r27, r1
 318:	8d 83       	std	Y+5, r24	; 0x05
 31a:	9e 83       	std	Y+6, r25	; 0x06
 31c:	af 83       	std	Y+7, r26	; 0x07
 31e:	b8 87       	std	Y+8, r27	; 0x08
 320:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <TimerFlag>
		}
		while(!TimerFlag);
 324:	88 23       	and	r24, r24
 326:	e1 f3       	breq	.-8      	; 0x320 <main+0x88>
 328:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <TimerFlag>
		TimerFlag = 0;
 32c:	d5 cf       	rjmp	.-86     	; 0x2d8 <main+0x40>

0000032e <__tablejump2__>:
	}
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	00 24       	eor	r0, r0
 334:	00 1c       	adc	r0, r0
 336:	0b be       	out	0x3b, r0	; 59
 338:	07 90       	elpm	r0, Z+
 33a:	f6 91       	elpm	r31, Z
 33c:	e0 2d       	mov	r30, r0
 33e:	09 94       	ijmp

00000340 <_exit>:
 340:	f8 94       	cli

00000342 <__stop_program>:
 342:	ff cf       	rjmp	.-2      	; 0x342 <__stop_program>
