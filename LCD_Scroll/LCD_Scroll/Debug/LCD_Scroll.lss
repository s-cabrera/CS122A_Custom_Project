
LCD_Scroll.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000506  0000059a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001f  0080014a  0080014a  000005e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000614  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000654  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f11  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f6  00000000  00000000  0000160d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00002003  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ac  00000000  00000000  00002690  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000608  00000000  00000000  0000283c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000712  00000000  00000000  00002e44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  00003556  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	f4 c0       	rjmp	.+488    	; 0x21e <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e6 e0       	ldi	r30, 0x06	; 6
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	aa 34       	cpi	r26, 0x4A	; 74
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	aa e4       	ldi	r26, 0x4A	; 74
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 36       	cpi	r26, 0x69	; 105
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	4a d1       	rcall	.+660    	; 0x358 <main>
  c4:	1e c2       	rjmp	.+1084   	; 0x502 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <SMTick1>:
		if(c==0){return b;}
		a = b;
		b = c;
	}
	return 0;
}
  c8:	ef 92       	push	r14
  ca:	ff 92       	push	r15
  cc:	0f 93       	push	r16
  ce:	1f 93       	push	r17
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	81 30       	cpi	r24, 0x01	; 1
  d6:	91 05       	cpc	r25, r1
  d8:	31 f0       	breq	.+12     	; 0xe6 <SMTick1+0x1e>
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	51 f0       	breq	.+20     	; 0xf4 <SMTick1+0x2c>
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	79 f4       	brne	.+30     	; 0x102 <SMTick1+0x3a>
  e4:	16 c0       	rjmp	.+44     	; 0x112 <SMTick1+0x4a>
  e6:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <in>
  ea:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <strSizeWelcome>
  ee:	98 17       	cp	r25, r24
  f0:	c8 f0       	brcs	.+50     	; 0x124 <SMTick1+0x5c>
  f2:	0f c0       	rjmp	.+30     	; 0x112 <SMTick1+0x4a>
  f4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <in>
  f8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <strSizeWelcome>
  fc:	98 17       	cp	r25, r24
  fe:	90 f0       	brcs	.+36     	; 0x124 <SMTick1+0x5c>
 100:	08 c0       	rjmp	.+16     	; 0x112 <SMTick1+0x4a>
 102:	81 30       	cpi	r24, 0x01	; 1
 104:	91 05       	cpc	r25, r1
 106:	29 f0       	breq	.+10     	; 0x112 <SMTick1+0x4a>
 108:	82 30       	cpi	r24, 0x02	; 2
 10a:	91 05       	cpc	r25, r1
 10c:	09 f0       	breq	.+2      	; 0x110 <SMTick1+0x48>
 10e:	4b c0       	rjmp	.+150    	; 0x1a6 <SMTick1+0xde>
 110:	09 c0       	rjmp	.+18     	; 0x124 <SMTick1+0x5c>
 112:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <cnt>
 116:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <j>
 11a:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <in>
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	41 c0       	rjmp	.+130    	; 0x1a6 <SMTick1+0xde>
 124:	c0 91 61 01 	lds	r28, 0x0161	; 0x800161 <in>
 128:	ec 2e       	mov	r14, r28
 12a:	f1 2c       	mov	r15, r1
 12c:	40 e1       	ldi	r20, 0x10	; 16
 12e:	50 e0       	ldi	r21, 0x00	; 0
 130:	4e 19       	sub	r20, r14
 132:	5f 09       	sbc	r21, r15
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	e0 e0       	ldi	r30, 0x00	; 0
 13a:	d0 e2       	ldi	r29, 0x20	; 32
 13c:	b7 01       	movw	r22, r14
 13e:	6f 5f       	subi	r22, 0xFF	; 255
 140:	7e 4f       	sbci	r23, 0xFE	; 254
 142:	c1 31       	cpi	r28, 0x11	; 17
 144:	58 f0       	brcs	.+22     	; 0x15c <SMTick1+0x94>
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	e1 50       	subi	r30, 0x01	; 1
 14a:	ff 4f       	sbci	r31, 0xFF	; 255
 14c:	cb 01       	movw	r24, r22
 14e:	83 0f       	add	r24, r19
 150:	91 1d       	adc	r25, r1
 152:	dc 01       	movw	r26, r24
 154:	8c 91       	ld	r24, X
 156:	80 83       	st	Z, r24
 158:	3f 5f       	subi	r19, 0xFF	; 255
 15a:	18 c0       	rjmp	.+48     	; 0x18c <SMTick1+0xc4>
 15c:	8e 2f       	mov	r24, r30
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	84 17       	cp	r24, r20
 162:	95 07       	cpc	r25, r21
 164:	7c f0       	brlt	.+30     	; 0x184 <SMTick1+0xbc>
 166:	e3 2f       	mov	r30, r19
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	87 01       	movw	r16, r14
 16c:	0e 1b       	sub	r16, r30
 16e:	1f 0b       	sbc	r17, r31
 170:	4a f0       	brmi	.+18     	; 0x184 <SMTick1+0xbc>
 172:	81 50       	subi	r24, 0x01	; 1
 174:	9f 4f       	sbci	r25, 0xFF	; 255
 176:	ef 5e       	subi	r30, 0xEF	; 239
 178:	fe 4f       	sbci	r31, 0xFE	; 254
 17a:	e0 81       	ld	r30, Z
 17c:	dc 01       	movw	r26, r24
 17e:	ec 93       	st	X, r30
 180:	3f 5f       	subi	r19, 0xFF	; 255
 182:	04 c0       	rjmp	.+8      	; 0x18c <SMTick1+0xc4>
 184:	fc 01       	movw	r30, r24
 186:	e1 50       	subi	r30, 0x01	; 1
 188:	ff 4f       	sbci	r31, 0xFF	; 255
 18a:	d0 83       	st	Z, r29
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	e2 2f       	mov	r30, r18
 190:	21 31       	cpi	r18, 0x11	; 17
 192:	b8 f2       	brcs	.-82     	; 0x142 <SMTick1+0x7a>
 194:	30 93 68 01 	sts	0x0168, r19	; 0x800168 <cnt>
 198:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <j>
 19c:	cf 5f       	subi	r28, 0xFF	; 255
 19e:	c0 93 61 01 	sts	0x0161, r28	; 0x800161 <in>
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	1f 91       	pop	r17
 1ac:	0f 91       	pop	r16
 1ae:	ff 90       	pop	r15
 1b0:	ef 90       	pop	r14
 1b2:	08 95       	ret

000001b4 <TimerSet>:
 1b4:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <_avr_timer_M>
 1b8:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <_avr_timer_M+0x1>
 1bc:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <_avr_timer_M+0x2>
 1c0:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <_avr_timer_M+0x3>
 1c4:	60 93 63 01 	sts	0x0163, r22	; 0x800163 <_avr_timer_cntcurr>
 1c8:	70 93 64 01 	sts	0x0164, r23	; 0x800164 <_avr_timer_cntcurr+0x1>
 1cc:	80 93 65 01 	sts	0x0165, r24	; 0x800165 <_avr_timer_cntcurr+0x2>
 1d0:	90 93 66 01 	sts	0x0166, r25	; 0x800166 <_avr_timer_cntcurr+0x3>
 1d4:	08 95       	ret

000001d6 <TimerOn>:
 1d6:	8b e0       	ldi	r24, 0x0B	; 11
 1d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 1dc:	8d e7       	ldi	r24, 0x7D	; 125
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 1e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 1e8:	82 e0       	ldi	r24, 0x02	; 2
 1ea:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 1ee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 1f2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 1f6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_avr_timer_M>
 1fa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_avr_timer_M+0x1>
 1fe:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <_avr_timer_M+0x2>
 202:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <_avr_timer_M+0x3>
 206:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_avr_timer_cntcurr>
 20a:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <_avr_timer_cntcurr+0x1>
 20e:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <_avr_timer_cntcurr+0x2>
 212:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <_avr_timer_cntcurr+0x3>
 216:	8f b7       	in	r24, 0x3f	; 63
 218:	80 68       	ori	r24, 0x80	; 128
 21a:	8f bf       	out	0x3f, r24	; 63
 21c:	08 95       	ret

0000021e <__vector_13>:
 21e:	1f 92       	push	r1
 220:	0f 92       	push	r0
 222:	0f b6       	in	r0, 0x3f	; 63
 224:	0f 92       	push	r0
 226:	11 24       	eor	r1, r1
 228:	8f 93       	push	r24
 22a:	9f 93       	push	r25
 22c:	af 93       	push	r26
 22e:	bf 93       	push	r27
 230:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <_avr_timer_cntcurr>
 234:	90 91 64 01 	lds	r25, 0x0164	; 0x800164 <_avr_timer_cntcurr+0x1>
 238:	a0 91 65 01 	lds	r26, 0x0165	; 0x800165 <_avr_timer_cntcurr+0x2>
 23c:	b0 91 66 01 	lds	r27, 0x0166	; 0x800166 <_avr_timer_cntcurr+0x3>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	a1 09       	sbc	r26, r1
 244:	b1 09       	sbc	r27, r1
 246:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_avr_timer_cntcurr>
 24a:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <_avr_timer_cntcurr+0x1>
 24e:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <_avr_timer_cntcurr+0x2>
 252:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <_avr_timer_cntcurr+0x3>
 256:	89 2b       	or	r24, r25
 258:	8a 2b       	or	r24, r26
 25a:	8b 2b       	or	r24, r27
 25c:	99 f4       	brne	.+38     	; 0x284 <__vector_13+0x66>
 25e:	81 e0       	ldi	r24, 0x01	; 1
 260:	80 93 67 01 	sts	0x0167, r24	; 0x800167 <TimerFlag>
 264:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <_avr_timer_M>
 268:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <_avr_timer_M+0x1>
 26c:	a0 91 48 01 	lds	r26, 0x0148	; 0x800148 <_avr_timer_M+0x2>
 270:	b0 91 49 01 	lds	r27, 0x0149	; 0x800149 <_avr_timer_M+0x3>
 274:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <_avr_timer_cntcurr>
 278:	90 93 64 01 	sts	0x0164, r25	; 0x800164 <_avr_timer_cntcurr+0x1>
 27c:	a0 93 65 01 	sts	0x0165, r26	; 0x800165 <_avr_timer_cntcurr+0x2>
 280:	b0 93 66 01 	sts	0x0166, r27	; 0x800166 <_avr_timer_cntcurr+0x3>
 284:	bf 91       	pop	r27
 286:	af 91       	pop	r26
 288:	9f 91       	pop	r25
 28a:	8f 91       	pop	r24
 28c:	0f 90       	pop	r0
 28e:	0f be       	out	0x3f, r0	; 63
 290:	0f 90       	pop	r0
 292:	1f 90       	pop	r1
 294:	18 95       	reti

00000296 <delay_ms>:
 296:	18 16       	cp	r1, r24
 298:	19 06       	cpc	r1, r25
 29a:	5c f0       	brlt	.+22     	; 0x2b2 <delay_ms+0x1c>
 29c:	08 95       	ret
 29e:	00 00       	nop
 2a0:	21 50       	subi	r18, 0x01	; 1
 2a2:	31 09       	sbc	r19, r1
 2a4:	e1 f7       	brne	.-8      	; 0x29e <delay_ms+0x8>
 2a6:	4f 5f       	subi	r20, 0xFF	; 255
 2a8:	5f 4f       	sbci	r21, 0xFF	; 255
 2aa:	84 17       	cp	r24, r20
 2ac:	95 07       	cpc	r25, r21
 2ae:	19 f4       	brne	.+6      	; 0x2b6 <delay_ms+0x20>
 2b0:	08 95       	ret
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	50 e0       	ldi	r21, 0x00	; 0
 2b6:	27 e0       	ldi	r18, 0x07	; 7
 2b8:	33 e0       	ldi	r19, 0x03	; 3
 2ba:	f1 cf       	rjmp	.-30     	; 0x29e <delay_ms+0x8>

000002bc <LCD_WriteCommand>:
 2bc:	5e 98       	cbi	0x0b, 6	; 11
 2be:	88 b9       	out	0x08, r24	; 8
 2c0:	5f 9a       	sbi	0x0b, 7	; 11
 2c2:	00 00       	nop
 2c4:	5f 98       	cbi	0x0b, 7	; 11
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	e5 cf       	rjmp	.-54     	; 0x296 <delay_ms>
 2cc:	08 95       	ret

000002ce <LCD_Cursor>:
 2ce:	81 31       	cpi	r24, 0x11	; 17
 2d0:	18 f4       	brcc	.+6      	; 0x2d8 <LCD_Cursor+0xa>
 2d2:	81 58       	subi	r24, 0x81	; 129
 2d4:	f3 cf       	rjmp	.-26     	; 0x2bc <LCD_WriteCommand>
 2d6:	08 95       	ret
 2d8:	81 55       	subi	r24, 0x51	; 81
 2da:	f0 cf       	rjmp	.-32     	; 0x2bc <LCD_WriteCommand>
 2dc:	08 95       	ret

000002de <LCD_init>:
 2de:	84 e6       	ldi	r24, 0x64	; 100
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	d9 df       	rcall	.-78     	; 0x296 <delay_ms>
 2e4:	88 e3       	ldi	r24, 0x38	; 56
 2e6:	ea df       	rcall	.-44     	; 0x2bc <LCD_WriteCommand>
 2e8:	86 e0       	ldi	r24, 0x06	; 6
 2ea:	e8 df       	rcall	.-48     	; 0x2bc <LCD_WriteCommand>
 2ec:	8f e0       	ldi	r24, 0x0F	; 15
 2ee:	e6 df       	rcall	.-52     	; 0x2bc <LCD_WriteCommand>
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	e4 df       	rcall	.-56     	; 0x2bc <LCD_WriteCommand>
 2f4:	8a e0       	ldi	r24, 0x0A	; 10
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	ce cf       	rjmp	.-100    	; 0x296 <delay_ms>
 2fa:	08 95       	ret

000002fc <LCD_WriteData>:
 2fc:	5e 9a       	sbi	0x0b, 6	; 11
 2fe:	88 b9       	out	0x08, r24	; 8
 300:	5f 9a       	sbi	0x0b, 7	; 11
 302:	00 00       	nop
 304:	5f 98       	cbi	0x0b, 7	; 11
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	c5 cf       	rjmp	.-118    	; 0x296 <delay_ms>
 30c:	08 95       	ret

0000030e <SMTick2>:
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	91 05       	cpc	r25, r1
 312:	51 f0       	breq	.+20     	; 0x328 <SMTick2+0x1a>
 314:	82 30       	cpi	r24, 0x02	; 2
 316:	91 05       	cpc	r25, r1
 318:	e1 f0       	breq	.+56     	; 0x352 <SMTick2+0x44>
 31a:	00 97       	sbiw	r24, 0x00	; 0
 31c:	11 f4       	brne	.+4      	; 0x322 <SMTick2+0x14>
 31e:	df df       	rcall	.-66     	; 0x2de <LCD_init>
 320:	18 c0       	rjmp	.+48     	; 0x352 <SMTick2+0x44>
 322:	82 30       	cpi	r24, 0x02	; 2
 324:	91 05       	cpc	r25, r1
 326:	b9 f4       	brne	.+46     	; 0x356 <SMTick2+0x48>
 328:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <t>
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	cf df       	rcall	.-98     	; 0x2ce <LCD_Cursor>
 330:	e0 91 60 01 	lds	r30, 0x0160	; 0x800160 <t>
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	e1 50       	subi	r30, 0x01	; 1
 338:	ff 4f       	sbci	r31, 0xFF	; 255
 33a:	80 81       	ld	r24, Z
 33c:	df df       	rcall	.-66     	; 0x2fc <LCD_WriteData>
 33e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <t>
 342:	8f 5f       	subi	r24, 0xFF	; 255
 344:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <t>
 348:	81 31       	cpi	r24, 0x11	; 17
 34a:	88 f3       	brcs	.-30     	; 0x32e <SMTick2+0x20>
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	08 95       	ret
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	90 e0       	ldi	r25, 0x00	; 0
 356:	08 95       	ret

00000358 <main>:
*/	

// --------END User defined FSMs-----------------------------------------------
// Implement scheduler code from PES.
int main()
{
 358:	cf 93       	push	r28
 35a:	df 93       	push	r29
 35c:	00 d0       	rcall	.+0      	; 0x35e <main+0x6>
 35e:	00 d0       	rcall	.+0      	; 0x360 <main+0x8>
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
	// Set Data Direction Registers
	DDRC = 0xFF; PORTC = 0x00; // LCD data lines
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	87 b9       	out	0x07, r24	; 7
 368:	18 b8       	out	0x08, r1	; 8
	//DDRB = 0xFF; PORTB = 0x00; // For LEDS
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
 36a:	8a b9       	out	0x0a, r24	; 10
 36c:	1b b8       	out	0x0b, r1	; 11
 36e:	0f 2e       	mov	r0, r31
 370:	fd e1       	ldi	r31, 0x1D	; 29
 372:	ef 2e       	mov	r14, r31
 374:	f0 2d       	mov	r31, r0
 376:	ff 24       	eor	r15, r15
 378:	f3 94       	inc	r15
 37a:	00 e0       	ldi	r16, 0x00	; 0
 37c:	10 e0       	ldi	r17, 0x00	; 0
 37e:	53 e1       	ldi	r21, 0x13	; 19
 380:	41 e0       	ldi	r20, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	20 e0       	ldi	r18, 0x00	; 0
 386:	04 c0       	rjmp	.+8      	; 0x390 <main+0x38>
	unsigned long int c;
	while(1){
		c = a%b;
		if(c==0){return b;}
		a = b;
		b = c;
 388:	e6 2e       	mov	r14, r22
 38a:	f7 2e       	mov	r15, r23
 38c:	08 2f       	mov	r16, r24
 38e:	19 2f       	mov	r17, r25
//--------Find GCD function --------------------------------------------------
unsigned long int findGCD(unsigned long int a, unsigned long int b)
{
	unsigned long int c;
	while(1){
		c = a%b;
 390:	65 2f       	mov	r22, r21
 392:	74 2f       	mov	r23, r20
 394:	83 2f       	mov	r24, r19
 396:	92 2f       	mov	r25, r18
 398:	2e 2d       	mov	r18, r14
 39a:	3f 2d       	mov	r19, r15
 39c:	40 2f       	mov	r20, r16
 39e:	51 2f       	mov	r21, r17
 3a0:	8e d0       	rcall	.+284    	; 0x4be <__udivmodsi4>
 3a2:	5e 2d       	mov	r21, r14
 3a4:	4f 2d       	mov	r20, r15
 3a6:	30 2f       	mov	r19, r16
 3a8:	21 2f       	mov	r18, r17
		if(c==0){return b;}
 3aa:	61 15       	cp	r22, r1
 3ac:	71 05       	cpc	r23, r1
 3ae:	81 05       	cpc	r24, r1
 3b0:	91 05       	cpc	r25, r1
 3b2:	51 f7       	brne	.-44     	; 0x388 <main+0x30>
	unsigned long int tmpGCD = 1;
	tmpGCD = findGCD(SMTick1_calc, SMTick2_calc);
	//tmpGCD = findGCD(tmpGCD, SMTick3_calc);

	//Recalculate GCD periods for scheduler
	unsigned long int SMTick1_period = SMTick1_calc/tmpGCD;
 3b4:	63 e1       	ldi	r22, 0x13	; 19
 3b6:	71 e0       	ldi	r23, 0x01	; 1
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	2e 2d       	mov	r18, r14
 3be:	3f 2d       	mov	r19, r15
 3c0:	40 2f       	mov	r20, r16
 3c2:	51 2f       	mov	r21, r17
 3c4:	7c d0       	rcall	.+248    	; 0x4be <__udivmodsi4>
 3c6:	49 01       	movw	r8, r18
 3c8:	5a 01       	movw	r10, r20
	unsigned long int SMTick2_period = SMTick2_calc/tmpGCD;
 3ca:	6d e1       	ldi	r22, 0x1D	; 29
 3cc:	71 e0       	ldi	r23, 0x01	; 1
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	2e 2d       	mov	r18, r14
 3d4:	3f 2d       	mov	r19, r15
 3d6:	40 2f       	mov	r20, r16
 3d8:	51 2f       	mov	r21, r17
 3da:	71 d0       	rcall	.+226    	; 0x4be <__udivmodsi4>
	//unsigned long int SMTick3_period = SMTick3_calc/tmpGCD;
	
	//Declare an array of tasks
	static task task1, task2;//, task3;
	task *tasks[] = {&task1, &task2};//, &task3};
 3dc:	a5 e5       	ldi	r26, 0x55	; 85
 3de:	b1 e0       	ldi	r27, 0x01	; 1
 3e0:	ba 83       	std	Y+2, r27	; 0x02
 3e2:	a9 83       	std	Y+1, r26	; 0x01
 3e4:	ea e4       	ldi	r30, 0x4A	; 74
 3e6:	f1 e0       	ldi	r31, 0x01	; 1
 3e8:	fc 83       	std	Y+4, r31	; 0x04
 3ea:	eb 83       	std	Y+3, r30	; 0x03
	const unsigned short numTasks = sizeof(tasks)/sizeof(task*);
	// Task 1
	
	task1.state = SM1_Start;//Task initial state.
 3ec:	1c 92       	st	X, r1
	task1.period = SMTick1_period;//Task Period.
 3ee:	11 96       	adiw	r26, 0x01	; 1
 3f0:	8d 92       	st	X+, r8
 3f2:	9d 92       	st	X+, r9
 3f4:	ad 92       	st	X+, r10
 3f6:	bc 92       	st	X, r11
 3f8:	14 97       	sbiw	r26, 0x04	; 4
	task1.elapsedTime = SMTick1_period;//Task current elapsed time.
 3fa:	15 96       	adiw	r26, 0x05	; 5
 3fc:	8d 92       	st	X+, r8
 3fe:	9d 92       	st	X+, r9
 400:	ad 92       	st	X+, r10
 402:	bc 92       	st	X, r11
 404:	18 97       	sbiw	r26, 0x08	; 8
	task1.TickFct = &SMTick1;//Function pointer for the tick.
 406:	84 e6       	ldi	r24, 0x64	; 100
 408:	90 e0       	ldi	r25, 0x00	; 0
 40a:	1a 96       	adiw	r26, 0x0a	; 10
 40c:	9c 93       	st	X, r25
 40e:	8e 93       	st	-X, r24
 410:	19 97       	sbiw	r26, 0x09	; 9

	
	// Task 2
	task2.state = SM2_Start;//Task initial state.
 412:	10 82       	st	Z, r1
	task2.period = SMTick2_period;//Task Period.
 414:	21 83       	std	Z+1, r18	; 0x01
 416:	32 83       	std	Z+2, r19	; 0x02
 418:	43 83       	std	Z+3, r20	; 0x03
 41a:	54 83       	std	Z+4, r21	; 0x04
	task2.elapsedTime = SMTick2_period;//Task current elapsed time.
 41c:	25 83       	std	Z+5, r18	; 0x05
 41e:	36 83       	std	Z+6, r19	; 0x06
 420:	47 83       	std	Z+7, r20	; 0x07
 422:	50 87       	std	Z+8, r21	; 0x08
	task2.TickFct = &SMTick2;//Function pointer for the tick.
 424:	87 e8       	ldi	r24, 0x87	; 135
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	92 87       	std	Z+10, r25	; 0x0a
 42a:	81 87       	std	Z+9, r24	; 0x09
	task3.period = SMTick3_period;//Task Period.
	task3.elapsedTime = SMTick3_period;//Task current elapsed time.
	task3.TickFct = &SMTick3;//Function pointer for the tick.	
	*/
	// Set the timer and turn it on
	TimerSet(tmpGCD);
 42c:	6e 2d       	mov	r22, r14
 42e:	7f 2d       	mov	r23, r15
 430:	80 2f       	mov	r24, r16
 432:	91 2f       	mov	r25, r17
	TimerOn();
 434:	bf de       	rcall	.-642    	; 0x1b4 <TimerSet>
 436:	cf de       	rcall	.-610    	; 0x1d6 <TimerOn>
 438:	7e 01       	movw	r14, r28
 43a:	85 e0       	ldi	r24, 0x05	; 5
 43c:	e8 0e       	add	r14, r24
 43e:	f1 1c       	adc	r15, r1
 440:	de 01       	movw	r26, r28
 442:	11 96       	adiw	r26, 0x01	; 1
 444:	6d 01       	movw	r12, r26
	
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
			// Task is ready to tick
			if ( tasks[i]->elapsedTime == tasks[i]->period ) {
 446:	f6 01       	movw	r30, r12
 448:	01 91       	ld	r16, Z+
 44a:	11 91       	ld	r17, Z+
 44c:	6f 01       	movw	r12, r30
 44e:	d8 01       	movw	r26, r16
 450:	15 96       	adiw	r26, 0x05	; 5
 452:	4d 91       	ld	r20, X+
 454:	5d 91       	ld	r21, X+
 456:	6d 91       	ld	r22, X+
 458:	7c 91       	ld	r23, X
 45a:	18 97       	sbiw	r26, 0x08	; 8
 45c:	11 96       	adiw	r26, 0x01	; 1
 45e:	8d 91       	ld	r24, X+
 460:	9d 91       	ld	r25, X+
 462:	0d 90       	ld	r0, X+
 464:	bc 91       	ld	r27, X
 466:	a0 2d       	mov	r26, r0
 468:	48 17       	cp	r20, r24
 46a:	59 07       	cpc	r21, r25
 46c:	6a 07       	cpc	r22, r26
 46e:	7b 07       	cpc	r23, r27
 470:	81 f4       	brne	.+32     	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
				// Setting next state for task
				tasks[i]->state = tasks[i]->TickFct(tasks[i]->state);
 472:	f8 01       	movw	r30, r16
 474:	80 81       	ld	r24, Z
 476:	01 84       	ldd	r0, Z+9	; 0x09
 478:	f2 85       	ldd	r31, Z+10	; 0x0a
 47a:	e0 2d       	mov	r30, r0
 47c:	08 2e       	mov	r0, r24
 47e:	00 0c       	add	r0, r0
 480:	99 0b       	sbc	r25, r25
 482:	09 95       	icall
 484:	d8 01       	movw	r26, r16
 486:	8c 93       	st	X, r24
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
 488:	f8 01       	movw	r30, r16
 48a:	15 82       	std	Z+5, r1	; 0x05
 48c:	16 82       	std	Z+6, r1	; 0x06
 48e:	17 82       	std	Z+7, r1	; 0x07
 490:	10 86       	std	Z+8, r1	; 0x08
			}
			tasks[i]->elapsedTime += 1;
 492:	f8 01       	movw	r30, r16
 494:	85 81       	ldd	r24, Z+5	; 0x05
 496:	96 81       	ldd	r25, Z+6	; 0x06
 498:	a7 81       	ldd	r26, Z+7	; 0x07
 49a:	b0 85       	ldd	r27, Z+8	; 0x08
 49c:	01 96       	adiw	r24, 0x01	; 1
 49e:	a1 1d       	adc	r26, r1
 4a0:	b1 1d       	adc	r27, r1
 4a2:	85 83       	std	Z+5, r24	; 0x05
 4a4:	96 83       	std	Z+6, r25	; 0x06
 4a6:	a7 83       	std	Z+7, r26	; 0x07
 4a8:	b0 87       	std	Z+8, r27	; 0x08
	TimerOn();
	unsigned short i; // Scheduler for-loop iterator
	
	while(1) {
		// Scheduler code
		for ( i = 0; i < numTasks; i++ ) {
 4aa:	ce 14       	cp	r12, r14
 4ac:	df 04       	cpc	r13, r15
 4ae:	59 f6       	brne	.-106    	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
				// Reset the elapsed time for next tick.
				tasks[i]->elapsedTime = 0;
			}
			tasks[i]->elapsedTime += 1;
		}
		while(!TimerFlag);
 4b0:	80 91 67 01 	lds	r24, 0x0167	; 0x800167 <TimerFlag>
 4b4:	88 23       	and	r24, r24
 4b6:	e1 f3       	breq	.-8      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
		TimerFlag = 0;
 4b8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <TimerFlag>
	}
 4bc:	c1 cf       	rjmp	.-126    	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

000004be <__udivmodsi4>:
 4be:	a1 e2       	ldi	r26, 0x21	; 33
 4c0:	1a 2e       	mov	r1, r26
 4c2:	aa 1b       	sub	r26, r26
 4c4:	bb 1b       	sub	r27, r27
 4c6:	fd 01       	movw	r30, r26
 4c8:	0d c0       	rjmp	.+26     	; 0x4e4 <__udivmodsi4_ep>

000004ca <__udivmodsi4_loop>:
 4ca:	aa 1f       	adc	r26, r26
 4cc:	bb 1f       	adc	r27, r27
 4ce:	ee 1f       	adc	r30, r30
 4d0:	ff 1f       	adc	r31, r31
 4d2:	a2 17       	cp	r26, r18
 4d4:	b3 07       	cpc	r27, r19
 4d6:	e4 07       	cpc	r30, r20
 4d8:	f5 07       	cpc	r31, r21
 4da:	20 f0       	brcs	.+8      	; 0x4e4 <__udivmodsi4_ep>
 4dc:	a2 1b       	sub	r26, r18
 4de:	b3 0b       	sbc	r27, r19
 4e0:	e4 0b       	sbc	r30, r20
 4e2:	f5 0b       	sbc	r31, r21

000004e4 <__udivmodsi4_ep>:
 4e4:	66 1f       	adc	r22, r22
 4e6:	77 1f       	adc	r23, r23
 4e8:	88 1f       	adc	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	1a 94       	dec	r1
 4ee:	69 f7       	brne	.-38     	; 0x4ca <__udivmodsi4_loop>
 4f0:	60 95       	com	r22
 4f2:	70 95       	com	r23
 4f4:	80 95       	com	r24
 4f6:	90 95       	com	r25
 4f8:	9b 01       	movw	r18, r22
 4fa:	ac 01       	movw	r20, r24
 4fc:	bd 01       	movw	r22, r26
 4fe:	cf 01       	movw	r24, r30
 500:	08 95       	ret

00000502 <_exit>:
 502:	f8 94       	cli

00000504 <__stop_program>:
 504:	ff cf       	rjmp	.-2      	; 0x504 <__stop_program>
